# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import communication_pb2 as communication__pb2


class CommunicationStub(object):
    """The greeting service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SubmitReport = channel.unary_unary(
                '/greet.Communication/SubmitReport',
                request_serializer=communication__pb2.ReportMessage.SerializeToString,
                response_deserializer=communication__pb2.ServerMessage.FromString,
                )
        self.BidirectionalCommunication = channel.stream_stream(
                '/greet.Communication/BidirectionalCommunication',
                request_serializer=communication__pb2.ClientMessage.SerializeToString,
                response_deserializer=communication__pb2.ServerMessage.FromString,
                )
        self.IndicatorReport = channel.unary_unary(
                '/greet.Communication/IndicatorReport',
                request_serializer=communication__pb2.IndicatorMessage.SerializeToString,
                response_deserializer=communication__pb2.ServerMessage.FromString,
                )
        self.SaveIndicatorReport = channel.unary_unary(
                '/greet.Communication/SaveIndicatorReport',
                request_serializer=communication__pb2.ReportXIndicator.SerializeToString,
                response_deserializer=communication__pb2.ServerMessage.FromString,
                )


class CommunicationServicer(object):
    """The greeting service definition.
    """

    def SubmitReport(self, request, context):
        """Unary
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BidirectionalCommunication(self, request_iterator, context):
        """Both Streaming
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IndicatorReport(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SaveIndicatorReport(self, request, context):
        """rpc ApiRequest (stream ClientRequest) returns (stream Data);
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CommunicationServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SubmitReport': grpc.unary_unary_rpc_method_handler(
                    servicer.SubmitReport,
                    request_deserializer=communication__pb2.ReportMessage.FromString,
                    response_serializer=communication__pb2.ServerMessage.SerializeToString,
            ),
            'BidirectionalCommunication': grpc.stream_stream_rpc_method_handler(
                    servicer.BidirectionalCommunication,
                    request_deserializer=communication__pb2.ClientMessage.FromString,
                    response_serializer=communication__pb2.ServerMessage.SerializeToString,
            ),
            'IndicatorReport': grpc.unary_unary_rpc_method_handler(
                    servicer.IndicatorReport,
                    request_deserializer=communication__pb2.IndicatorMessage.FromString,
                    response_serializer=communication__pb2.ServerMessage.SerializeToString,
            ),
            'SaveIndicatorReport': grpc.unary_unary_rpc_method_handler(
                    servicer.SaveIndicatorReport,
                    request_deserializer=communication__pb2.ReportXIndicator.FromString,
                    response_serializer=communication__pb2.ServerMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'greet.Communication', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Communication(object):
    """The greeting service definition.
    """

    @staticmethod
    def SubmitReport(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/greet.Communication/SubmitReport',
            communication__pb2.ReportMessage.SerializeToString,
            communication__pb2.ServerMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BidirectionalCommunication(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/greet.Communication/BidirectionalCommunication',
            communication__pb2.ClientMessage.SerializeToString,
            communication__pb2.ServerMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def IndicatorReport(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/greet.Communication/IndicatorReport',
            communication__pb2.IndicatorMessage.SerializeToString,
            communication__pb2.ServerMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SaveIndicatorReport(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/greet.Communication/SaveIndicatorReport',
            communication__pb2.ReportXIndicator.SerializeToString,
            communication__pb2.ServerMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
